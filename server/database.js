import bcrypt from "bcryptjs"
import sqlite3 from "sqlite3"

export class Database {
  constructor() {
    this.db = new sqlite3.Database("./stiner_forum.db", (err) => {
      if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", err.message)
      } else {
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => this.initTables(), 100)
      }
    })
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
  async initTables() {
    console.log("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
      await this.createUsersTable()
      await this.createContentBlocksTable()
      await this.createForumInfoTable()

      // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
      await this.createDefaultAdmin()
      await this.seedForumData()

      console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error)
    }
  }

  createUsersTable() {
    return new Promise((resolve, reject) => {
      this.db.run(
        `
        CREATE TABLE IF NOT EXISTS users (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          username TEXT UNIQUE NOT NULL,
          password TEXT NOT NULL,
          role TEXT DEFAULT 'user',
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
      `,
        (err) => {
          if (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users:", err)
            reject(err)
          } else {
            console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞")
            resolve()
          }
        }
      )
    })
  }

  createContentBlocksTable() {
    return new Promise((resolve, reject) => {
      this.db.run(
        `
        CREATE TABLE IF NOT EXISTS content_blocks (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          title TEXT NOT NULL,
          content TEXT NOT NULL,
          block_type TEXT NOT NULL,
          position INTEGER DEFAULT 0,
          is_active BOOLEAN DEFAULT 1,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
      `,
        (err) => {
          if (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã content_blocks:", err)
            reject(err)
          } else {
            console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ content_blocks —Å–æ–∑–¥–∞–Ω–∞")
            resolve()
          }
        }
      )
    })
  }

  createForumInfoTable() {
    return new Promise((resolve, reject) => {
      this.db.run(
        `
        CREATE TABLE IF NOT EXISTS forum_info (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          section TEXT NOT NULL,
          topic_title TEXT NOT NULL,
          created_date TEXT NOT NULL,
          messages_count INTEGER DEFAULT 0,
          views_count INTEGER DEFAULT 0,
          participants_count INTEGER DEFAULT 0,
          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
      `,
        (err) => {
          if (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã forum_info:", err)
            reject(err)
          } else {
            console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ forum_info —Å–æ–∑–¥–∞–Ω–∞")
            resolve()
          }
        }
      )
    })
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  async createDefaultAdmin() {
    try {
      const hashedPassword = await bcrypt.hash("admin123", 10)

      return new Promise((resolve, reject) => {
        this.db.run(
          `
          INSERT OR IGNORE INTO users (username, password, role)
          VALUES (?, ?, ?)
        `,
          ["admin", hashedPassword, "admin"],
          (err) => {
            if (err) {
              console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞:", err)
              reject(err)
            } else {
              console.log("üë§ –ê–¥–º–∏–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω: login: admin, password: admin123")
              resolve()
            }
          }
        )
      })
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è:", error)
      throw error
    }
  }

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä—É–º–∞
  async seedForumData() {
    try {
      // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ
      await new Promise((resolve, reject) => {
        this.db.run(
          `
          INSERT OR REPLACE INTO forum_info (
            id, section, topic_title, created_date, messages_count, views_count, participants_count
          ) VALUES (?, ?, ?, ?, ?, ?, ?)
        `,
          [
            1,
            "–û–±—ä—è–≤–ª–µ–Ω–∏—è –∏ —Ä–µ–∫–ª–∞–º–∞",
            "–¢–æ–ª—å–∫–æ –Ω–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ Apple –æ—Ç –°—Ç–∏–Ω–≥–µ—Ä–∞! –†–∞–±–æ—Ç–∞–µ–º —Å 2007 –≥–æ–¥–∞",
            "12 –ú–∞—Ä—Ç–∞ 2014",
            16071,
            10436345,
            808,
          ],
          (err) => {
            if (err) reject(err)
            else resolve()
          }
        )
      })

      // –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –±–ª–æ–∫–∏
      const contentBlocks = [
        {
          title: "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞",
          content: "–û–±—ä—è–≤–ª–µ–Ω–∏—è –∏ —Ä–µ–∫–ª–∞–º–∞",
          block_type: "section_header",
          position: 1,
        },
        {
          title: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã",
          content: "–¢–æ–ª—å–∫–æ –Ω–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ Apple –æ—Ç –°—Ç–∏–Ω–≥–µ—Ä–∞! –†–∞–±–æ—Ç–∞–µ–º —Å 2007 –≥–æ–¥–∞",
          block_type: "topic_title",
          position: 2,
        },
        {
          title: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ",
          content:
            "–°–æ–∑–¥–∞–Ω–∞: 12 –ú–∞—Ä—Ç–∞ 2014 –°—Ä–¥ 15:13:42<br>–°–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–º–µ: 16071 (+4), –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: 10436345<br>–í—Å–µ–≥–æ –≤ —Ç–µ–º–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 808",
          block_type: "topic_info",
          position: 3,
        },
        {
          title: "–û –º–∞–≥–∞–∑–∏–Ω–µ StiNGer",
          content: `<h3>üçé –ú–∞–≥–∞–∑–∏–Ω —Ç–µ—Ö–Ω–∏–∫–∏ Apple "StiNGer"</h3>
          <p><strong>–†–∞–±–æ—Ç–∞–µ–º —Å 2007 –≥–æ–¥–∞!</strong></p>
          <p>üì± –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ –Ω–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ Apple:</p>
          <ul>
            <li>iPhone –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π</li>
            <li>iPad –∏ iPad Mini</li>
            <li>MacBook –∏ iMac</li>
            <li>Apple Watch</li>
            <li>–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã Apple</li>
          </ul>
          <p>‚úÖ –¢–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π<br>
          üöö –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –û–º—Å–∫—É<br>
          üí∞ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ü–µ–Ω—ã<br>
          üîß –°–µ—Ä–≤–∏—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</p>`,
          block_type: "store_info",
          position: 4,
        },
        {
          title: "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
          content: `<div class="products">
            <div class="product-item">
              <h4>iPhone 5S 16GB Space Gray –†–°–¢</h4>
              <p class="price">26 000 ‚ÇΩ</p>
              <p class="original-price">–¶–µ–Ω–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: 29 990 ‚ÇΩ</p>
              <span class="status sold">–ü—Ä–æ–¥–∞–Ω</span>
            </div>
            <div class="product-item">
              <h4>iPhone 5 16GB Black (US)</h4>
              <p class="price">20 000 ‚ÇΩ</p>
              <p class="description">–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ, –ù–ï —Ä–µ—Ñ–∞–±—Ä–∏—à–µ–¥, —Ä–µ–∞–ª—å–Ω–æ –Ω–æ–≤—ã–µ</p>
              <span class="status available">–í –Ω–∞–ª–∏—á–∏–∏</span>
            </div>
            <div class="product-item">
              <h4>iPad Mini 4G 32GB –†–°–¢</h4>
              <p class="price">–ü–æ –∑–∞–ø—Ä–æ—Å—É</p>
              <span class="status sold">–ü—Ä–æ–¥–∞–Ω</span>
            </div>
          </div>`,
          block_type: "products",
          position: 5,
        },
        {
          title: "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
          content: `<div class="contacts">
            <h3>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã</h3>
            <p><strong>–ú–∞–≥–∞–∑–∏–Ω:</strong> StiNGer (—Ä–∞–±–æ—Ç–∞–µ–º —Å 2007 –≥–æ–¥–∞)</p>
            <p><strong>–ì–æ—Ä–æ–¥:</strong> –û–º—Å–∫</p>
            <p><strong>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</strong> –ù–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ Apple</p>
            <p><strong>–§–æ—Ä—É–º:</strong> om7.com</p>
            <p class="note">‚ö†Ô∏è –ó–≤–æ–Ω–∏—Ç–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è –∏ —Ü–µ–Ω!</p>
          </div>`,
          block_type: "contacts",
          position: 6,
        },
      ]

      // –í—Å—Ç–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
      for (const block of contentBlocks) {
        await new Promise((resolve, reject) => {
          this.db.run(
            `
            INSERT OR REPLACE INTO content_blocks (title, content, block_type, position)
            VALUES (?, ?, ?, ?)
          `,
            [block.title, block.content, block.block_type, block.position],
            (err) => {
              if (err) reject(err)
              else resolve()
            }
          )
        })
      }

      console.log("üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä—É–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏:", error)
      throw error
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  getUser(username) {
    return new Promise((resolve, reject) => {
      this.db.get("SELECT * FROM users WHERE username = ?", [username], (err, row) => {
        if (err) reject(err)
        else resolve(row)
      })
    })
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
  getAllContentBlocks() {
    return new Promise((resolve, reject) => {
      this.db.all(
        "SELECT * FROM content_blocks WHERE is_active = 1 ORDER BY position ASC",
        (err, rows) => {
          if (err) reject(err)
          else resolve(rows)
        }
      )
    })
  }

  getContentBlock(id) {
    return new Promise((resolve, reject) => {
      this.db.get("SELECT * FROM content_blocks WHERE id = ?", [id], (err, row) => {
        if (err) reject(err)
        else resolve(row)
      })
    })
  }

  updateContentBlock(id, data) {
    return new Promise((resolve, reject) => {
      const { title, content, block_type, position, is_active } = data
      this.db.run(
        `
        UPDATE content_blocks
        SET title = ?, content = ?, block_type = ?, position = ?, is_active = ?, updated_at = CURRENT_TIMESTAMP
        WHERE id = ?
      `,
        [title, content, block_type, position, is_active, id],
        function (err) {
          if (err) reject(err)
          else resolve(this.changes)
        }
      )
    })
  }

  createContentBlock(data) {
    return new Promise((resolve, reject) => {
      const { title, content, block_type, position } = data
      this.db.run(
        `
        INSERT INTO content_blocks (title, content, block_type, position)
        VALUES (?, ?, ?, ?)
      `,
        [title, content, block_type, position],
        function (err) {
          if (err) reject(err)
          else resolve(this.lastID)
        }
      )
    })
  }

  deleteContentBlock(id) {
    return new Promise((resolve, reject) => {
      this.db.run("DELETE FROM content_blocks WHERE id = ?", [id], function (err) {
        if (err) reject(err)
        else resolve(this.changes)
      })
    })
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ä—É–º–µ
  getForumInfo() {
    return new Promise((resolve, reject) => {
      this.db.get("SELECT * FROM forum_info WHERE id = 1", (err, row) => {
        if (err) reject(err)
        else resolve(row)
      })
    })
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
  close() {
    this.db.close((err) => {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î:", err.message)
      } else {
        console.log("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
      }
    })
  }
}
